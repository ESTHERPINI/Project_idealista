{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "import base64\n",
    "import pandas as pd\n",
    "import json\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# configuramos globalmente las figuras\n",
    "#plt.rcParams[\"figure.figsize\"] = (16, 4)\n",
    "#plt.rcParams[\"xtick.labelsize\"] = 8 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#API_KEY = \"n421au7se73p0n67unk7u1h0jminlna9\"\n",
    "#SECRET_KEY = \"lm2fMZK1dG0H\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#message = API_KEY+\":\"+SECRET_KEY\n",
    "#print(message)\n",
    "#message_bytes = message.encode('ascii')\n",
    "#print(message_bytes)\n",
    "#base64_bytes = \"Basic \"+ str(base64.b64encode(message_bytes))\n",
    "#print(base64_bytes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#def get_oauth_token():\n",
    "    \n",
    "    #headers = {\"Authorization\":\"Basic bjQyMWF1N3NlNzNwMG42N3Vuazd1MWgwam1pbmxuYTk6bG0yZk1aSzFkRzBI\",\n",
    "               #\"Content-Type\":\"application/x-www-form-urlencoded\"}\n",
    "    \n",
    "    #headers = {\"Authorization\":base64_bytes,\n",
    "               #\"Content-Type\":\"application/x-www-form-urlencoded\"}\n",
    "    #params_dic = {\"grant_type\" : \"client_credentials\",\n",
    "                  #\"scope\" : \"read\"}\n",
    "    #response = requests.post(\"https://api.idealista.com/oauth/token\", headers=headers, params = params_dic)\n",
    "    #print(response)\n",
    "    #bearer_token = json.loads(response.text)['access_token']\n",
    "    #return bearer_token\n",
    "    \n",
    "#def search_api(token, url):  \n",
    "    #headers = {'Content-Type': 'Content-Type: multipart/form-data;', 'Authorization' : 'Bearer ' + token}\n",
    "    #content = requests.post(url, headers = headers)\n",
    "    #result = content.json()\n",
    "    #return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df_tot = pd.DataFrame()\n",
    "#df_tot"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "country = 'es' #values: es, it, pt\n",
    "locale = 'es' #values: es, it, pt, en, ca\n",
    "language = 'es' #\n",
    "max_items = '50'\n",
    "operation = 'sale' \n",
    "property_type = 'homes'\n",
    "order = 'publicationDate' \n",
    "center = '40.4146500,-3.7004000' \n",
    "distance = '10000'\n",
    "sort = 'desc'\n",
    "\n",
    "df_tot = pd.read_csv(\"idealista.csv\")\n",
    "lista_codigos_totales = df_tot[\"propertyCode\"]\n",
    "\n",
    "#df_tot = pd.DataFrame()\n",
    "\n",
    "i = 1\n",
    "repetidos=False\n",
    "\n",
    "while repetidos == False:\n",
    "    for i in range(limit):\n",
    "        url = ('https://api.idealista.com/3.5/'+country+\n",
    "           '/search?operation='+operation+\n",
    "           '&maxItems='+max_items+\n",
    "           '&order='+order+\n",
    "           '&center='+center+\n",
    "           '&distance='+distance+\n",
    "           '&propertyType='+property_type+\n",
    "           '&sort='+sort+ \n",
    "           '&numPage=%s'+\n",
    "           '&language='+language) %(i)\n",
    "    \n",
    "    a = search_api(get_oauth_token(), url)\n",
    " \n",
    "    \n",
    "    for h in a['elementList']:\n",
    "        if h[\"propertyCode\"] in lista_codigos_totales:\n",
    "            repetidos =True\n",
    "    i +=1\n",
    "\n",
    "    df = pd.DataFrame.from_dict(a['elementList'])\n",
    "    \n",
    "    df_tot = pd.concat([df_tot,df])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df_tot.to_csv(\"idealista_2.csv\", index=False)\n",
    "#df_2=pd.read_csv(\"idealista_2.csv\")\n",
    "#df_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>propertyCode</th>\n",
       "      <th>thumbnail</th>\n",
       "      <th>externalReference</th>\n",
       "      <th>numPhotos</th>\n",
       "      <th>floor</th>\n",
       "      <th>price</th>\n",
       "      <th>propertyType</th>\n",
       "      <th>operation</th>\n",
       "      <th>size</th>\n",
       "      <th>exterior</th>\n",
       "      <th>...</th>\n",
       "      <th>priceByArea</th>\n",
       "      <th>detailedType</th>\n",
       "      <th>suggestedTexts</th>\n",
       "      <th>hasPlan</th>\n",
       "      <th>has3DTour</th>\n",
       "      <th>has360</th>\n",
       "      <th>hasStaging</th>\n",
       "      <th>topNewDevelopment</th>\n",
       "      <th>parkingSpace</th>\n",
       "      <th>newDevelopmentFinished</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>94477419</td>\n",
       "      <td>https://img3.idealista.com/blur/WEB_LISTING/0/...</td>\n",
       "      <td>60190176</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>114000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>53.0</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>2151.0</td>\n",
       "      <td>{'typology': 'flat'}</td>\n",
       "      <td>{'subtitle': 'Delicias, Madrid', 'title': 'Pis...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>94477330</td>\n",
       "      <td>https://img3.idealista.com/blur/WEB_LISTING/0/...</td>\n",
       "      <td>NOVAL ÁNGEL</td>\n",
       "      <td>42</td>\n",
       "      <td>1</td>\n",
       "      <td>319000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>97.0</td>\n",
       "      <td>True</td>\n",
       "      <td>...</td>\n",
       "      <td>3289.0</td>\n",
       "      <td>{'typology': 'flat'}</td>\n",
       "      <td>{'subtitle': 'Puerta del Ángel, Madrid', 'titl...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>94477212</td>\n",
       "      <td>https://img3.idealista.com/blur/WEB_LISTING/0/...</td>\n",
       "      <td>LORE-0767</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>496000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>130.0</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>3815.0</td>\n",
       "      <td>{'typology': 'flat'}</td>\n",
       "      <td>{'subtitle': 'Malasaña-Universidad, Madrid', '...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>82312915</td>\n",
       "      <td>https://img3.idealista.com/blur/WEB_LISTING/0/...</td>\n",
       "      <td>ch-422800</td>\n",
       "      <td>40</td>\n",
       "      <td>3</td>\n",
       "      <td>1340000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>183.0</td>\n",
       "      <td>True</td>\n",
       "      <td>...</td>\n",
       "      <td>7322.0</td>\n",
       "      <td>{'typology': 'flat'}</td>\n",
       "      <td>{'subtitle': 'El Viso, Madrid', 'title': 'Piso'}</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>{'hasParkingSpace': True, 'isParkingSpaceInclu...</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>94476388</td>\n",
       "      <td>https://img3.idealista.com/blur/WEB_LISTING/0/...</td>\n",
       "      <td>CHAMBERI 3</td>\n",
       "      <td>2</td>\n",
       "      <td>bj</td>\n",
       "      <td>290000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>60.0</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>4833.0</td>\n",
       "      <td>{'typology': 'flat'}</td>\n",
       "      <td>{'subtitle': 'Nuevos Ministerios-Ríos Rosas, M...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 37 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   propertyCode                                          thumbnail  \\\n",
       "0      94477419  https://img3.idealista.com/blur/WEB_LISTING/0/...   \n",
       "1      94477330  https://img3.idealista.com/blur/WEB_LISTING/0/...   \n",
       "2      94477212  https://img3.idealista.com/blur/WEB_LISTING/0/...   \n",
       "3      82312915  https://img3.idealista.com/blur/WEB_LISTING/0/...   \n",
       "4      94476388  https://img3.idealista.com/blur/WEB_LISTING/0/...   \n",
       "\n",
       "  externalReference  numPhotos floor      price propertyType operation   size  \\\n",
       "0          60190176          2     1   114000.0         flat      sale   53.0   \n",
       "1       NOVAL ÁNGEL         42     1   319000.0         flat      sale   97.0   \n",
       "2         LORE-0767         10     2   496000.0         flat      sale  130.0   \n",
       "3         ch-422800         40     3  1340000.0         flat      sale  183.0   \n",
       "4        CHAMBERI 3          2    bj   290000.0         flat      sale   60.0   \n",
       "\n",
       "   exterior  ...  priceByArea          detailedType  \\\n",
       "0     False  ...       2151.0  {'typology': 'flat'}   \n",
       "1      True  ...       3289.0  {'typology': 'flat'}   \n",
       "2     False  ...       3815.0  {'typology': 'flat'}   \n",
       "3      True  ...       7322.0  {'typology': 'flat'}   \n",
       "4     False  ...       4833.0  {'typology': 'flat'}   \n",
       "\n",
       "                                      suggestedTexts hasPlan has3DTour has360  \\\n",
       "0  {'subtitle': 'Delicias, Madrid', 'title': 'Pis...   False     False  False   \n",
       "1  {'subtitle': 'Puerta del Ángel, Madrid', 'titl...   False     False  False   \n",
       "2  {'subtitle': 'Malasaña-Universidad, Madrid', '...   False     False  False   \n",
       "3   {'subtitle': 'El Viso, Madrid', 'title': 'Piso'}   False     False  False   \n",
       "4  {'subtitle': 'Nuevos Ministerios-Ríos Rosas, M...    True     False  False   \n",
       "\n",
       "  hasStaging topNewDevelopment  \\\n",
       "0      False             False   \n",
       "1      False             False   \n",
       "2      False             False   \n",
       "3      False             False   \n",
       "4      False             False   \n",
       "\n",
       "                                        parkingSpace  newDevelopmentFinished  \n",
       "0                                                NaN                     NaN  \n",
       "1                                                NaN                     NaN  \n",
       "2                                                NaN                     NaN  \n",
       "3  {'hasParkingSpace': True, 'isParkingSpaceInclu...                     NaN  \n",
       "4                                                NaN                     NaN  \n",
       "\n",
       "[5 rows x 37 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.read_csv(\"idealista.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 3800 entries, 0 to 3799\n",
      "Data columns (total 37 columns):\n",
      " #   Column                  Non-Null Count  Dtype  \n",
      "---  ------                  --------------  -----  \n",
      " 0   propertyCode            3800 non-null   int64  \n",
      " 1   thumbnail               3761 non-null   object \n",
      " 2   externalReference       2868 non-null   object \n",
      " 3   numPhotos               3800 non-null   int64  \n",
      " 4   floor                   3499 non-null   object \n",
      " 5   price                   3800 non-null   float64\n",
      " 6   propertyType            3800 non-null   object \n",
      " 7   operation               3800 non-null   object \n",
      " 8   size                    3800 non-null   float64\n",
      " 9   exterior                3800 non-null   bool   \n",
      " 10  rooms                   3800 non-null   int64  \n",
      " 11  bathrooms               3800 non-null   int64  \n",
      " 12  address                 3800 non-null   object \n",
      " 13  province                3800 non-null   object \n",
      " 14  municipality            3800 non-null   object \n",
      " 15  district                3800 non-null   object \n",
      " 16  country                 3800 non-null   object \n",
      " 17  neighborhood            3798 non-null   object \n",
      " 18  latitude                3800 non-null   float64\n",
      " 19  longitude               3800 non-null   float64\n",
      " 20  showAddress             3800 non-null   bool   \n",
      " 21  url                     3800 non-null   object \n",
      " 22  distance                3800 non-null   int64  \n",
      " 23  hasVideo                3800 non-null   bool   \n",
      " 24  status                  3800 non-null   object \n",
      " 25  newDevelopment          3800 non-null   bool   \n",
      " 26  hasLift                 3560 non-null   object \n",
      " 27  priceByArea             3800 non-null   float64\n",
      " 28  detailedType            3800 non-null   object \n",
      " 29  suggestedTexts          3800 non-null   object \n",
      " 30  hasPlan                 3800 non-null   bool   \n",
      " 31  has3DTour               3800 non-null   bool   \n",
      " 32  has360                  3800 non-null   bool   \n",
      " 33  hasStaging              3800 non-null   bool   \n",
      " 34  topNewDevelopment       3800 non-null   bool   \n",
      " 35  parkingSpace            884 non-null    object \n",
      " 36  newDevelopmentFinished  140 non-null    object \n",
      "dtypes: bool(9), float64(5), int64(5), object(18)\n",
      "memory usage: 864.8+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['propertyCode', 'thumbnail', 'externalReference', 'numPhotos', 'floor',\n",
       "       'price', 'propertyType', 'operation', 'size', 'exterior', 'rooms',\n",
       "       'bathrooms', 'address', 'province', 'municipality', 'district',\n",
       "       'country', 'neighborhood', 'latitude', 'longitude', 'showAddress',\n",
       "       'url', 'distance', 'hasVideo', 'status', 'newDevelopment', 'hasLift',\n",
       "       'priceByArea', 'detailedType', 'suggestedTexts', 'hasPlan', 'has3DTour',\n",
       "       'has360', 'hasStaging', 'topNewDevelopment', 'parkingSpace',\n",
       "       'newDevelopmentFinished'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Madrid', 'Leganés', 'Pozuelo de Alarcón', 'Getafe'], dtype=object)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.municipality.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['sale'], dtype=object)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.operation.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=df[df.municipality==\"Madrid\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Chequear valores duplicados"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "len df: 3672\n"
     ]
    }
   ],
   "source": [
    "print(\"len df:\",len(df))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>propertyCode</th>\n",
       "      <th>thumbnail</th>\n",
       "      <th>externalReference</th>\n",
       "      <th>numPhotos</th>\n",
       "      <th>floor</th>\n",
       "      <th>price</th>\n",
       "      <th>propertyType</th>\n",
       "      <th>operation</th>\n",
       "      <th>size</th>\n",
       "      <th>exterior</th>\n",
       "      <th>...</th>\n",
       "      <th>priceByArea</th>\n",
       "      <th>detailedType</th>\n",
       "      <th>suggestedTexts</th>\n",
       "      <th>hasPlan</th>\n",
       "      <th>has3DTour</th>\n",
       "      <th>has360</th>\n",
       "      <th>hasStaging</th>\n",
       "      <th>topNewDevelopment</th>\n",
       "      <th>parkingSpace</th>\n",
       "      <th>newDevelopmentFinished</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>94477419</td>\n",
       "      <td>https://img3.idealista.com/blur/WEB_LISTING/0/...</td>\n",
       "      <td>60190176</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>114000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>53.0</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>2151.0</td>\n",
       "      <td>{'typology': 'flat'}</td>\n",
       "      <td>{'subtitle': 'Delicias, Madrid', 'title': 'Pis...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>94477330</td>\n",
       "      <td>https://img3.idealista.com/blur/WEB_LISTING/0/...</td>\n",
       "      <td>NOVAL ÁNGEL</td>\n",
       "      <td>42</td>\n",
       "      <td>1</td>\n",
       "      <td>319000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>97.0</td>\n",
       "      <td>True</td>\n",
       "      <td>...</td>\n",
       "      <td>3289.0</td>\n",
       "      <td>{'typology': 'flat'}</td>\n",
       "      <td>{'subtitle': 'Puerta del Ángel, Madrid', 'titl...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>94477212</td>\n",
       "      <td>https://img3.idealista.com/blur/WEB_LISTING/0/...</td>\n",
       "      <td>LORE-0767</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>496000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>130.0</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>3815.0</td>\n",
       "      <td>{'typology': 'flat'}</td>\n",
       "      <td>{'subtitle': 'Malasaña-Universidad, Madrid', '...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>82312915</td>\n",
       "      <td>https://img3.idealista.com/blur/WEB_LISTING/0/...</td>\n",
       "      <td>ch-422800</td>\n",
       "      <td>40</td>\n",
       "      <td>3</td>\n",
       "      <td>1340000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>183.0</td>\n",
       "      <td>True</td>\n",
       "      <td>...</td>\n",
       "      <td>7322.0</td>\n",
       "      <td>{'typology': 'flat'}</td>\n",
       "      <td>{'subtitle': 'El Viso, Madrid', 'title': 'Piso'}</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>{'hasParkingSpace': True, 'isParkingSpaceInclu...</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>94476388</td>\n",
       "      <td>https://img3.idealista.com/blur/WEB_LISTING/0/...</td>\n",
       "      <td>CHAMBERI 3</td>\n",
       "      <td>2</td>\n",
       "      <td>bj</td>\n",
       "      <td>290000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>60.0</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>4833.0</td>\n",
       "      <td>{'typology': 'flat'}</td>\n",
       "      <td>{'subtitle': 'Nuevos Ministerios-Ríos Rosas, M...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3795</th>\n",
       "      <td>94296062</td>\n",
       "      <td>https://img3.idealista.com/blur/WEB_LISTING/0/...</td>\n",
       "      <td>560091010</td>\n",
       "      <td>28</td>\n",
       "      <td>bj</td>\n",
       "      <td>182400.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>116.0</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>1572.0</td>\n",
       "      <td>{'typology': 'flat'}</td>\n",
       "      <td>{'subtitle': 'Casco Histórico de Vallecas, Mad...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3796</th>\n",
       "      <td>94295998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>560090031</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>320400.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>73.0</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>4389.0</td>\n",
       "      <td>{'typology': 'flat'}</td>\n",
       "      <td>{'subtitle': 'Prosperidad, Madrid', 'title': '...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3797</th>\n",
       "      <td>94295874</td>\n",
       "      <td>NaN</td>\n",
       "      <td>560087421</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>136600.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>49.0</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>2788.0</td>\n",
       "      <td>{'typology': 'flat'}</td>\n",
       "      <td>{'subtitle': 'Vista Alegre, Madrid', 'title': ...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3798</th>\n",
       "      <td>94295872</td>\n",
       "      <td>NaN</td>\n",
       "      <td>560087420</td>\n",
       "      <td>0</td>\n",
       "      <td>bj</td>\n",
       "      <td>150100.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>51.0</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>2943.0</td>\n",
       "      <td>{'typology': 'flat'}</td>\n",
       "      <td>{'subtitle': 'Vista Alegre, Madrid', 'title': ...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3799</th>\n",
       "      <td>94295853</td>\n",
       "      <td>NaN</td>\n",
       "      <td>560087397</td>\n",
       "      <td>0</td>\n",
       "      <td>bj</td>\n",
       "      <td>1148900.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>137.0</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>8386.0</td>\n",
       "      <td>{'typology': 'flat'}</td>\n",
       "      <td>{'subtitle': 'El Viso, Madrid', 'title': 'Piso...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3620 rows × 37 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      propertyCode                                          thumbnail  \\\n",
       "0         94477419  https://img3.idealista.com/blur/WEB_LISTING/0/...   \n",
       "1         94477330  https://img3.idealista.com/blur/WEB_LISTING/0/...   \n",
       "2         94477212  https://img3.idealista.com/blur/WEB_LISTING/0/...   \n",
       "3         82312915  https://img3.idealista.com/blur/WEB_LISTING/0/...   \n",
       "4         94476388  https://img3.idealista.com/blur/WEB_LISTING/0/...   \n",
       "...            ...                                                ...   \n",
       "3795      94296062  https://img3.idealista.com/blur/WEB_LISTING/0/...   \n",
       "3796      94295998                                                NaN   \n",
       "3797      94295874                                                NaN   \n",
       "3798      94295872                                                NaN   \n",
       "3799      94295853                                                NaN   \n",
       "\n",
       "     externalReference  numPhotos floor      price propertyType operation  \\\n",
       "0             60190176          2     1   114000.0         flat      sale   \n",
       "1          NOVAL ÁNGEL         42     1   319000.0         flat      sale   \n",
       "2            LORE-0767         10     2   496000.0         flat      sale   \n",
       "3            ch-422800         40     3  1340000.0         flat      sale   \n",
       "4           CHAMBERI 3          2    bj   290000.0         flat      sale   \n",
       "...                ...        ...   ...        ...          ...       ...   \n",
       "3795         560091010         28    bj   182400.0         flat      sale   \n",
       "3796         560090031          0     5   320400.0         flat      sale   \n",
       "3797         560087421          0     1   136600.0         flat      sale   \n",
       "3798         560087420          0    bj   150100.0         flat      sale   \n",
       "3799         560087397          0    bj  1148900.0         flat      sale   \n",
       "\n",
       "       size  exterior  ...  priceByArea          detailedType  \\\n",
       "0      53.0     False  ...       2151.0  {'typology': 'flat'}   \n",
       "1      97.0      True  ...       3289.0  {'typology': 'flat'}   \n",
       "2     130.0     False  ...       3815.0  {'typology': 'flat'}   \n",
       "3     183.0      True  ...       7322.0  {'typology': 'flat'}   \n",
       "4      60.0     False  ...       4833.0  {'typology': 'flat'}   \n",
       "...     ...       ...  ...          ...                   ...   \n",
       "3795  116.0     False  ...       1572.0  {'typology': 'flat'}   \n",
       "3796   73.0     False  ...       4389.0  {'typology': 'flat'}   \n",
       "3797   49.0     False  ...       2788.0  {'typology': 'flat'}   \n",
       "3798   51.0     False  ...       2943.0  {'typology': 'flat'}   \n",
       "3799  137.0     False  ...       8386.0  {'typology': 'flat'}   \n",
       "\n",
       "                                         suggestedTexts hasPlan has3DTour  \\\n",
       "0     {'subtitle': 'Delicias, Madrid', 'title': 'Pis...   False     False   \n",
       "1     {'subtitle': 'Puerta del Ángel, Madrid', 'titl...   False     False   \n",
       "2     {'subtitle': 'Malasaña-Universidad, Madrid', '...   False     False   \n",
       "3      {'subtitle': 'El Viso, Madrid', 'title': 'Piso'}   False     False   \n",
       "4     {'subtitle': 'Nuevos Ministerios-Ríos Rosas, M...    True     False   \n",
       "...                                                 ...     ...       ...   \n",
       "3795  {'subtitle': 'Casco Histórico de Vallecas, Mad...   False     False   \n",
       "3796  {'subtitle': 'Prosperidad, Madrid', 'title': '...   False     False   \n",
       "3797  {'subtitle': 'Vista Alegre, Madrid', 'title': ...   False     False   \n",
       "3798  {'subtitle': 'Vista Alegre, Madrid', 'title': ...   False     False   \n",
       "3799  {'subtitle': 'El Viso, Madrid', 'title': 'Piso...   False     False   \n",
       "\n",
       "     has360 hasStaging topNewDevelopment  \\\n",
       "0     False      False             False   \n",
       "1     False      False             False   \n",
       "2     False      False             False   \n",
       "3     False      False             False   \n",
       "4     False      False             False   \n",
       "...     ...        ...               ...   \n",
       "3795  False      False             False   \n",
       "3796  False      False             False   \n",
       "3797  False      False             False   \n",
       "3798  False      False             False   \n",
       "3799  False      False             False   \n",
       "\n",
       "                                           parkingSpace  \\\n",
       "0                                                   NaN   \n",
       "1                                                   NaN   \n",
       "2                                                   NaN   \n",
       "3     {'hasParkingSpace': True, 'isParkingSpaceInclu...   \n",
       "4                                                   NaN   \n",
       "...                                                 ...   \n",
       "3795                                                NaN   \n",
       "3796                                                NaN   \n",
       "3797                                                NaN   \n",
       "3798                                                NaN   \n",
       "3799                                                NaN   \n",
       "\n",
       "      newDevelopmentFinished  \n",
       "0                        NaN  \n",
       "1                        NaN  \n",
       "2                        NaN  \n",
       "3                        NaN  \n",
       "4                        NaN  \n",
       "...                      ...  \n",
       "3795                     NaN  \n",
       "3796                     NaN  \n",
       "3797                     NaN  \n",
       "3798                     NaN  \n",
       "3799                     NaN  \n",
       "\n",
       "[3620 rows x 37 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "len df: 3672\n"
     ]
    }
   ],
   "source": [
    "print(\"len df:\",len(df))\n",
    "#No había ningún valor duplicado"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Valores nulos o vacíos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "thumbnail                  1.007625\n",
       "externalReference         24.482571\n",
       "floor                      6.617647\n",
       "hasLift                    5.119826\n",
       "parkingSpace              77.995643\n",
       "newDevelopmentFinished    96.350763\n",
       "dtype: float64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def null_cols(db):\n",
    "    nulls = df.isna().sum()\n",
    "    return nulls[nulls > 0] / len(df) * 100\n",
    "null_cols(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "propertyCode                 0\n",
       "thumbnail                   37\n",
       "externalReference          899\n",
       "numPhotos                    0\n",
       "floor                      243\n",
       "price                        0\n",
       "propertyType                 0\n",
       "operation                    0\n",
       "size                         0\n",
       "exterior                     0\n",
       "rooms                        0\n",
       "bathrooms                    0\n",
       "address                      0\n",
       "province                     0\n",
       "municipality                 0\n",
       "district                     0\n",
       "country                      0\n",
       "neighborhood                 0\n",
       "latitude                     0\n",
       "longitude                    0\n",
       "showAddress                  0\n",
       "url                          0\n",
       "distance                     0\n",
       "hasVideo                     0\n",
       "status                       0\n",
       "newDevelopment               0\n",
       "hasLift                    188\n",
       "priceByArea                  0\n",
       "detailedType                 0\n",
       "suggestedTexts               0\n",
       "hasPlan                      0\n",
       "has3DTour                    0\n",
       "has360                       0\n",
       "hasStaging                   0\n",
       "topNewDevelopment            0\n",
       "parkingSpace              2864\n",
       "newDevelopmentFinished    3538\n",
       "dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#True=1; suma los 1\n",
    "null_cols = df.isnull().sum()\n",
    "null_cols"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### distric"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Arganzuela', 'Latina', 'Centro', 'Chamartín', 'Chamberí',\n",
       "       'Moratalaz', 'Tetuán', 'Carabanchel', 'Retiro', 'Vicálvaro',\n",
       "       'Fuencarral', 'San Blas', 'Puente de Vallecas',\n",
       "       'Barrio de Salamanca', 'Ciudad Lineal', 'Moncloa', 'Villaverde',\n",
       "       'Hortaleza', 'Villa de Vallecas', 'Usera'], dtype=object)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.district.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(16,4))\n",
    "\n",
    "#sns.countplot(x=df.district)\n",
    "ax = sns.countplot(x=\"district\", data=df, palette='pastel' )\n",
    "ax.set_xticklabels(ax.get_xticklabels(),  rotation=40, ha=\"right\",fontsize=10)\n",
    "plt.tight_layout() \n",
    "\n",
    "# Chart and axes titles\n",
    "ax.set_title('Viviendas a la venta por distrito',fontsize = 18, fontweight='bold' )\n",
    "ax.set_xlabel('Distrito', fontsize = 15)\n",
    "ax.set_ylabel('Distrito count', fontsize = 15)\n",
    "\n",
    "# show count (+ annotate)\n",
    "for rect in ax.patches:\n",
    "    ax.text (rect.get_x() + rect.get_width()  / 2,rect.get_height()+ 0.75,rect.get_height(),horizontalalignment='center', fontsize = 11)\n",
    "\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "##plt.figure(figsize=(16,4))\n",
    "\n",
    "#ax = sns.countplot(x=df.district==\"centro\", palette='pastel', hue=\"neighborhood\" )\n",
    "#ax.set_xticklabels(ax.get_xticklabels(),  rotation=40, ha=\"right\",fontsize=10)\n",
    "#plt.tight_layout() \n",
    "\n",
    "# Chart and axes titles\n",
    "#ax.set_title('Viviendas a la venta por distrito/barrio',fontsize = 18, fontweight='bold' )\n",
    "#ax.set_xlabel('Distrito', fontsize = 15)\n",
    "#ax.set_ylabel('Distrito count', fontsize = 15)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### hasStaging"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([False])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.hasStaging.unique()\n",
    "#eliminaremos esta columna porque no contiene valores sobre si la casa tien Home Staging o no"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### hasPlan, hasVideo, has360, has3DTour"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([False,  True])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.hasPlan.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([False,  True])"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.hasVideo.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([False,  True])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.has360.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([False,  True])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.has3DTour.unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### externalRegerence"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['60190176', 'NOVAL ÁNGEL', 'LORE-0767', ..., '560087421',\n",
       "       '560087420', '560087397'], dtype=object)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.externalReference.unique()\n",
    "#eliminaremos esta columna, la información que contiene carece de importancia"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### thumbnail"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['https://img3.idealista.com/blur/WEB_LISTING/0/id.pro.es.image.master/53/9a/65/889949483.jpg',\n",
       "       'https://img3.idealista.com/blur/WEB_LISTING/0/id.pro.es.image.master/fc/e2/0c/889947745.jpg',\n",
       "       'https://img3.idealista.com/blur/WEB_LISTING/0/id.pro.es.image.master/d5/54/9f/889943840.jpg',\n",
       "       ...,\n",
       "       'https://img3.idealista.com/blur/WEB_LISTING/0/id.pro.es.image.master/b9/85/70/84189070.jpg',\n",
       "       'https://img3.idealista.com/blur/WEB_LISTING/0/id.pro.es.image.master/aa/a9/7d/884877709.jpg',\n",
       "       'https://img3.idealista.com/blur/WEB_LISTING/0/id.pro.es.image.master/e8/6c/e7/886703356.jpg'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.thumbnail.unique()\n",
    "#eliminaremos esta columna, la información que contiene carece de importancia"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['propertyCode', 'thumbnail', 'externalReference', 'numPhotos', 'floor',\n",
       "       'price', 'propertyType', 'operation', 'size', 'exterior', 'rooms',\n",
       "       'bathrooms', 'address', 'province', 'municipality', 'district',\n",
       "       'country', 'neighborhood', 'latitude', 'longitude', 'showAddress',\n",
       "       'url', 'distance', 'hasVideo', 'status', 'newDevelopment', 'hasLift',\n",
       "       'priceByArea', 'detailedType', 'suggestedTexts', 'hasPlan', 'has3DTour',\n",
       "       'has360', 'hasStaging', 'topNewDevelopment', 'parkingSpace',\n",
       "       'newDevelopmentFinished'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### newDevelopment/status varias columnas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['good', 'renew', 'newdevelopment'], dtype=object)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.status.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "newDevelopment unique: [False  True]\n",
      "topnewDevelopment unique: [False]\n",
      "newDevelopmentFinished unique: [nan True False]\n"
     ]
    }
   ],
   "source": [
    "print(\"newDevelopment unique:\",df.newDevelopment.unique())\n",
    "print(\"topnewDevelopment unique:\",df.topNewDevelopment.unique())\n",
    "print(\"newDevelopmentFinished unique:\",df.newDevelopmentFinished.unique()) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Comprobar si estas columnas tienen los mismos datos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False    3672\n",
       "dtype: int64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "((df[\"newDevelopment\"] == df[\"topNewDevelopment\"]) & (df[\"newDevelopment\"] == df[\"newDevelopmentFinished\"])).value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True     3538\n",
       "False     134\n",
       "dtype: int64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(df[\"newDevelopment\"] == df[\"topNewDevelopment\"]).value_counts()\n",
    "#eliminaremos esta columna ya que contien los mismos valores que df.newDevelopment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False    3669\n",
       "True        3\n",
       "dtype: int64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(df[\"newDevelopment\"] == df[\"newDevelopmentFinished\"]).value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3538"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"newDevelopmentFinished\"].isnull().sum()\n",
    "#eliminaremos esta columna ya que contien muchos valones nulos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(6,4))\n",
    "\n",
    "\n",
    "ax = sns.countplot(x=\"newDevelopment\", data=df, palette='pastel' )\n",
    "ax.set_xticklabels(ax.get_xticklabels(),  rotation=40, ha=\"right\",fontsize=10)\n",
    "plt.tight_layout() \n",
    "\n",
    "# Chart and axes titles\n",
    "ax.set_title('Viviendas nueva construcción o segunda mano',fontsize = 18, fontweight='bold' )\n",
    "ax.set_xlabel('Segunda mano/ nueva construcción', fontsize = 15)\n",
    "ax.set_ylabel('Count', fontsize = 15)\n",
    "\n",
    "# show count (+ annotate)\n",
    "for rect in ax.patches:\n",
    "    ax.text (rect.get_x() + rect.get_width()  / 2,rect.get_height()+ 0.75,rect.get_height(),horizontalalignment='center', fontsize = 11)\n",
    "\n",
    "plt.show() \n",
    "\n",
    "#La mayoría son de segunda mano"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### propertyType & detailedType"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['flat', 'studio', 'penthouse', 'chalet', 'duplex'], dtype=object)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.propertyType.unique()\n",
    "#La principal oferta es de pisos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([\"{'typology': 'flat'}\",\n",
       "       \"{'typology': 'flat', 'subTypology': 'studio'}\",\n",
       "       \"{'typology': 'flat', 'subTypology': 'penthouse'}\",\n",
       "       \"{'typology': 'chalet', 'subTypology': 'independantHouse'}\",\n",
       "       \"{'typology': 'flat', 'subTypology': 'duplex'}\",\n",
       "       \"{'typology': 'chalet', 'subTypology': 'terracedHouse'}\",\n",
       "       \"{'typology': 'chalet'}\",\n",
       "       \"{'typology': 'chalet', 'subTypology': 'semidetachedHouse'}\"],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.detailedType.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(6,4))\n",
    "\n",
    "\n",
    "ax = sns.countplot(x=\"propertyType\", data=df, palette='pastel' )\n",
    "ax.set_xticklabels(ax.get_xticklabels(),  rotation=40, ha=\"right\",fontsize=10)\n",
    "plt.tight_layout() \n",
    "\n",
    "# Chart and axes titles\n",
    "ax.set_title('Tipo de vivienda a la venta',fontsize = 18, fontweight='bold' )\n",
    "ax.set_xlabel('Tipo', fontsize = 15)\n",
    "ax.set_ylabel('Count', fontsize = 15)\n",
    "\n",
    "# show count (+ annotate)\n",
    "for rect in ax.patches:\n",
    "    ax.text (rect.get_x() + rect.get_width()  / 2,rect.get_height()+ 0.75,rect.get_height(),horizontalalignment='center', fontsize = 11)\n",
    "\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### eliminamos primeras columnas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* externalReference\n",
    "* thumbanail\n",
    "* detailedType\n",
    "* topNewDevelopment & newDevelomentFinished\n",
    "* hasStaging\n",
    "* country (la selección ya era España)\n",
    "* province (la selección era Madrid)\n",
    "* suggestedTexts \n",
    "* address\n",
    "* url\n",
    "* municipality"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(columns = [\"externalReference\", \"suggestedTexts\",\"thumbnail\", \"detailedType\", \"topNewDevelopment\",\n",
    "                   \"newDevelopmentFinished\",\"province\",\"hasStaging\", \"country\",\"neighborhood\",'municipality',\n",
    "                   'address','url'],\n",
    "        inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['propertyCode', 'numPhotos', 'floor', 'price', 'propertyType',\n",
       "       'operation', 'size', 'exterior', 'rooms', 'bathrooms', 'district',\n",
       "       'latitude', 'longitude', 'showAddress', 'distance', 'hasVideo',\n",
       "       'status', 'newDevelopment', 'hasLift', 'priceByArea', 'hasPlan',\n",
       "       'has3DTour', 'has360', 'parkingSpace'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### hasLift "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1126"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#columna hasLift puede ser una variable importante para el valor de la vivienda \n",
    "#visualizamos las que están en blanco\n",
    "len(df[df[\"hasLift\"] == 0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(6,4))\n",
    "\n",
    "\n",
    "ax = sns.countplot(x=\"hasLift\", data=df, palette='pastel' )\n",
    "ax.set_xticklabels(ax.get_xticklabels(),  rotation=40, ha=\"right\",fontsize=10)\n",
    "plt.tight_layout() \n",
    "\n",
    "# Chart and axes titles\n",
    "ax.set_title('Viviendas a la venta sin/con ascensor',fontsize = 18, fontweight='bold' )\n",
    "ax.set_xlabel('Ascensor', fontsize = 15)\n",
    "ax.set_ylabel('Count', fontsize = 15)\n",
    "\n",
    "# show count (+ annotate)\n",
    "for rect in ax.patches:\n",
    "    ax.text (rect.get_x() + rect.get_width()  / 2,rect.get_height()+ 0.75,rect.get_height(),horizontalalignment='center', fontsize = 11)\n",
    "\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df_lift=df[df[\"hasLift\"] == 0]\n",
    "#df_lift.groupby(df.propertyType).count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  2,  42,  10,  40,  33,  23,  38,   7,  36,  46,  45,  19,  21,\n",
       "         8,  48,  30,  34,  16,  11,  28,  14,  13,  27,  22,  15,   5,\n",
       "        20,  35,  25,  29,  18,  24,  26,  12,   6,   0,   1,  43,  49,\n",
       "        17,   4,  53,  41,  57,  31,  37,  54,  39,  32,   9,  60,  61,\n",
       "        52,   3,  51,  82,  69,  44,  50,  68,  55,  66,  77,  56,  80,\n",
       "        78,  64,  65,  47,  67,  58,  71,  62,  70,  59,  95,  85,  90,\n",
       "       123,  63,  75, 119,  86,  72,  74,  73], dtype=int64)"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.numPhotos.unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### parking"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### floor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['1', '2', '3', 'bj', '4', '7', nan, '13', '14', 'ss', '5', '8',\n",
       "       '6', '10', 'en', '9', 'st', '11', '19', '12', '15', '20', '16'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.floor.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,6))\n",
    "\n",
    "\n",
    "ax = sns.countplot(x=\"floor\", data=df, palette='pastel' )\n",
    "ax.set_xticklabels(ax.get_xticklabels(),  rotation=40, ha=\"right\",fontsize=10)\n",
    "plt.tight_layout() \n",
    "\n",
    "# Chart and axes titles\n",
    "ax.set_title('Número de dormitorios',fontsize = 18, fontweight='bold' )\n",
    "ax.set_xlabel('dormitorios', fontsize = 15)\n",
    "ax.set_ylabel('Count', fontsize = 15)\n",
    "\n",
    "# show count (+ annotate)\n",
    "for rect in ax.patches:\n",
    "    ax.text (rect.get_x() + rect.get_width()  / 2,rect.get_height()+ 0.75,rect.get_height(),horizontalalignment='center', fontsize = 11)\n",
    "\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"preciom2\"]=df[\"price\"]/df['size']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.002399238152546356"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"dif_priceByArea_preciom2\"]=df['priceByArea']-df['preciom2']\n",
    "df[\"dif_priceByArea_preciom2\"].mean()\n",
    "#ambas columnas tienen un valor muy silimar, el el gráfico se superponen"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plotting both distibutions on the same figure\n",
    "fig = sns.kdeplot(df['priceByArea'], shade=True, color=\"r\")\n",
    "fig = sns.kdeplot(df['preciom2'], shade=True, color=\"b\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import scipy.stats\n",
    "import numpy as np\n",
    "from numpy import linspace\n",
    "from scipy.stats import gaussian_kde\n",
    "# Fig size\n",
    "plt.rcParams[\"figure.figsize\"]=12,8\n",
    "\n",
    "# plot density chart for var1\n",
    "#sns.kdeplot(data=df, x=\"priceByArea\",  fill=True, alpha=1) #variable idealista por defecto\n",
    "\n",
    "# plot density chart for var2\n",
    "kde = gaussian_kde(df.preciom2)\n",
    "x_range = linspace(min(df.preciom2), max(df.preciom2), len(df.preciom2))\n",
    "\n",
    "# multiply by -1 to reverse axis (mirror plot)\n",
    "sns.lineplot(x=x_range*1, y=kde(x_range) * 1, color='orange') \n",
    "plt.fill_between(x_range*1, kde(x_range) * 1, color='orange')\n",
    "\n",
    "# add axis names        \n",
    "plt.xlabel(\"Precio medio m2\")\n",
    "plt.axhline(y=0, linestyle='-',linewidth=1, color='black')\n",
    "\n",
    "\n",
    "\n",
    "# show the graph\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Preparo una tabla excel con los nombres de distritos para equipararlos en el resto de df/notebooks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.district.to_excel(\"tabla_district.xls\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Importamos df población distrito para añadirlo a esta tabla de idealista:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Unnamed: 0', 'district', 'population'], dtype='object')"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "district_population=pd.read_excel(\"../Población/poblacion_distrito.xls\")\n",
    "district_population.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>district</th>\n",
       "      <th>population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Carabanchel</td>\n",
       "      <td>253.797</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Fuencarral</td>\n",
       "      <td>246.640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Latina</td>\n",
       "      <td>238.901</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Puente de Vallecas</td>\n",
       "      <td>235.418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Ciudad Lineal</td>\n",
       "      <td>216.861</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             district  population\n",
       "0         Carabanchel     253.797\n",
       "1          Fuencarral     246.640\n",
       "2              Latina     238.901\n",
       "3  Puente de Vallecas     235.418\n",
       "4       Ciudad Lineal     216.861"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "district_population.drop(columns = [district_population.columns[0]], inplace = True)\n",
    "district_population.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.merge(df, district_population,on=\"district\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>propertyCode</th>\n",
       "      <th>numPhotos</th>\n",
       "      <th>floor</th>\n",
       "      <th>price</th>\n",
       "      <th>propertyType</th>\n",
       "      <th>operation</th>\n",
       "      <th>size</th>\n",
       "      <th>exterior</th>\n",
       "      <th>rooms</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>...</th>\n",
       "      <th>newDevelopment</th>\n",
       "      <th>hasLift</th>\n",
       "      <th>priceByArea</th>\n",
       "      <th>hasPlan</th>\n",
       "      <th>has3DTour</th>\n",
       "      <th>has360</th>\n",
       "      <th>parkingSpace</th>\n",
       "      <th>preciom2</th>\n",
       "      <th>dif_priceByArea_preciom2</th>\n",
       "      <th>population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>94477419</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>114000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>53.0</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>2151.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2150.943396</td>\n",
       "      <td>0.056604</td>\n",
       "      <td>154.264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>94474758</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>149000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>38.0</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>3921.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3921.052632</td>\n",
       "      <td>-0.052632</td>\n",
       "      <td>154.264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>94477419</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>114000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>53.0</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>2151.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2150.943396</td>\n",
       "      <td>0.056604</td>\n",
       "      <td>154.264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>94474758</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>149000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>38.0</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>3921.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3921.052632</td>\n",
       "      <td>-0.052632</td>\n",
       "      <td>154.264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>94471119</td>\n",
       "      <td>49</td>\n",
       "      <td>1</td>\n",
       "      <td>500000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>125.0</td>\n",
       "      <td>True</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>4000.0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>{'hasParkingSpace': True, 'isParkingSpaceInclu...</td>\n",
       "      <td>4000.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>154.264</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   propertyCode  numPhotos floor     price propertyType operation   size  \\\n",
       "0      94477419          2     1  114000.0         flat      sale   53.0   \n",
       "1      94474758          7     1  149000.0         flat      sale   38.0   \n",
       "2      94477419          2     1  114000.0         flat      sale   53.0   \n",
       "3      94474758          7     1  149000.0         flat      sale   38.0   \n",
       "4      94471119         49     1  500000.0         flat      sale  125.0   \n",
       "\n",
       "   exterior  rooms  bathrooms  ... newDevelopment  hasLift  priceByArea  \\\n",
       "0     False      1          1  ...          False    False       2151.0   \n",
       "1     False      1          1  ...          False    False       3921.0   \n",
       "2     False      1          1  ...          False    False       2151.0   \n",
       "3     False      1          1  ...          False    False       3921.0   \n",
       "4      True      3          2  ...          False     True       4000.0   \n",
       "\n",
       "   hasPlan  has3DTour  has360  \\\n",
       "0    False      False   False   \n",
       "1    False      False   False   \n",
       "2    False      False   False   \n",
       "3    False      False   False   \n",
       "4     True      False   False   \n",
       "\n",
       "                                        parkingSpace     preciom2  \\\n",
       "0                                                NaN  2150.943396   \n",
       "1                                                NaN  3921.052632   \n",
       "2                                                NaN  2150.943396   \n",
       "3                                                NaN  3921.052632   \n",
       "4  {'hasParkingSpace': True, 'isParkingSpaceInclu...  4000.000000   \n",
       "\n",
       "  dif_priceByArea_preciom2  population  \n",
       "0                 0.056604     154.264  \n",
       "1                -0.052632     154.264  \n",
       "2                 0.056604     154.264  \n",
       "3                -0.052632     154.264  \n",
       "4                 0.000000     154.264  \n",
       "\n",
       "[5 rows x 27 columns]"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([154.264, 238.901, 135.314, 146.231, 139.914,  94.818, 158.494,\n",
       "       253.797, 119.687,  72.294, 246.64 , 158.602, 235.418, 146.578,\n",
       "       216.861, 119.789, 149.277, 188.694, 110.643, 139.909])"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.population.unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Importamos df criminalidad distrito para añadirlo a esta tabla de idealista:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Unnamed: 0', 'district', 'insecurity_ratio'], dtype='object')"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "district_insecurity=pd.read_excel(\"../Criminalidad/criminalidad_distrito.xls\")\n",
    "district_insecurity.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>district</th>\n",
       "      <th>insecurity_ratio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Arganzuela</td>\n",
       "      <td>28.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Barajas</td>\n",
       "      <td>33.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Carabanchel</td>\n",
       "      <td>88.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Centro</td>\n",
       "      <td>189.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Chamartín</td>\n",
       "      <td>31.6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      district  insecurity_ratio\n",
       "0   Arganzuela              28.8\n",
       "1      Barajas              33.2\n",
       "2  Carabanchel              88.2\n",
       "3       Centro             189.2\n",
       "4    Chamartín              31.6"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "district_insecurity.drop(columns = ['Unnamed: 0'], inplace = True)\n",
    "district_insecurity.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.merge(df, district_insecurity,on=\"district\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>propertyCode</th>\n",
       "      <th>numPhotos</th>\n",
       "      <th>floor</th>\n",
       "      <th>price</th>\n",
       "      <th>propertyType</th>\n",
       "      <th>operation</th>\n",
       "      <th>size</th>\n",
       "      <th>exterior</th>\n",
       "      <th>rooms</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>...</th>\n",
       "      <th>hasLift</th>\n",
       "      <th>priceByArea</th>\n",
       "      <th>hasPlan</th>\n",
       "      <th>has3DTour</th>\n",
       "      <th>has360</th>\n",
       "      <th>parkingSpace</th>\n",
       "      <th>preciom2</th>\n",
       "      <th>dif_priceByArea_preciom2</th>\n",
       "      <th>population</th>\n",
       "      <th>insecurity_ratio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>94477419</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>114000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>53.0</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>2151.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2150.943396</td>\n",
       "      <td>0.056604</td>\n",
       "      <td>154.264</td>\n",
       "      <td>28.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>94474758</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>149000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>38.0</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>3921.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3921.052632</td>\n",
       "      <td>-0.052632</td>\n",
       "      <td>154.264</td>\n",
       "      <td>28.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>94477419</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>114000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>53.0</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>2151.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2150.943396</td>\n",
       "      <td>0.056604</td>\n",
       "      <td>154.264</td>\n",
       "      <td>28.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>94474758</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>149000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>38.0</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>3921.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3921.052632</td>\n",
       "      <td>-0.052632</td>\n",
       "      <td>154.264</td>\n",
       "      <td>28.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>94471119</td>\n",
       "      <td>49</td>\n",
       "      <td>1</td>\n",
       "      <td>500000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>125.0</td>\n",
       "      <td>True</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>4000.0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>{'hasParkingSpace': True, 'isParkingSpaceInclu...</td>\n",
       "      <td>4000.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>154.264</td>\n",
       "      <td>28.8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   propertyCode  numPhotos floor     price propertyType operation   size  \\\n",
       "0      94477419          2     1  114000.0         flat      sale   53.0   \n",
       "1      94474758          7     1  149000.0         flat      sale   38.0   \n",
       "2      94477419          2     1  114000.0         flat      sale   53.0   \n",
       "3      94474758          7     1  149000.0         flat      sale   38.0   \n",
       "4      94471119         49     1  500000.0         flat      sale  125.0   \n",
       "\n",
       "   exterior  rooms  bathrooms  ... hasLift  priceByArea  hasPlan  has3DTour  \\\n",
       "0     False      1          1  ...   False       2151.0    False      False   \n",
       "1     False      1          1  ...   False       3921.0    False      False   \n",
       "2     False      1          1  ...   False       2151.0    False      False   \n",
       "3     False      1          1  ...   False       3921.0    False      False   \n",
       "4      True      3          2  ...    True       4000.0     True      False   \n",
       "\n",
       "   has360                                       parkingSpace     preciom2  \\\n",
       "0   False                                                NaN  2150.943396   \n",
       "1   False                                                NaN  3921.052632   \n",
       "2   False                                                NaN  2150.943396   \n",
       "3   False                                                NaN  3921.052632   \n",
       "4   False  {'hasParkingSpace': True, 'isParkingSpaceInclu...  4000.000000   \n",
       "\n",
       "   dif_priceByArea_preciom2 population  insecurity_ratio  \n",
       "0                  0.056604    154.264              28.8  \n",
       "1                 -0.052632    154.264              28.8  \n",
       "2                  0.056604    154.264              28.8  \n",
       "3                 -0.052632    154.264              28.8  \n",
       "4                  0.000000    154.264              28.8  \n",
       "\n",
       "[5 rows x 28 columns]"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### datos precio medio vivienda munimadrid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Distrito</th>\n",
       "      <th>mean_price_munimadrid</th>\n",
       "      <th>district</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>01. Centro</td>\n",
       "      <td>5254.3125</td>\n",
       "      <td>Centro</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>02. Arganzuela</td>\n",
       "      <td>4170.1250</td>\n",
       "      <td>Arganzuela</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>03. Retiro</td>\n",
       "      <td>4837.0000</td>\n",
       "      <td>Retiro</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>04. Salamanca</td>\n",
       "      <td>6224.1250</td>\n",
       "      <td>Barrio de Salamanca</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>05. Chamartín</td>\n",
       "      <td>5403.5625</td>\n",
       "      <td>Chamartín</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Distrito  mean_price_munimadrid             district\n",
       "0      01. Centro              5254.3125               Centro\n",
       "1  02. Arganzuela              4170.1250           Arganzuela\n",
       "2      03. Retiro              4837.0000               Retiro\n",
       "3   04. Salamanca              6224.1250  Barrio de Salamanca\n",
       "4   05. Chamartín              5403.5625            Chamartín"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#importamos df colegios\n",
    "munimadrid_precio_medio_vivienda=pd.read_excel(\"../Precio_vivienda/precio_medio_munimadrid.xls\")\n",
    "munimadrid_precio_medio_vivienda.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "munimadrid_precio_medio_vivienda.drop(munimadrid_precio_medio_vivienda.columns[0],axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_price_munimadrid</th>\n",
       "      <th>district</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5254.3125</td>\n",
       "      <td>Centro</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4170.1250</td>\n",
       "      <td>Arganzuela</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   mean_price_munimadrid    district\n",
       "0              5254.3125      Centro\n",
       "1              4170.1250  Arganzuela"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "munimadrid_precio_medio_vivienda.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>propertyCode</th>\n",
       "      <th>numPhotos</th>\n",
       "      <th>floor</th>\n",
       "      <th>price</th>\n",
       "      <th>propertyType</th>\n",
       "      <th>operation</th>\n",
       "      <th>size</th>\n",
       "      <th>exterior</th>\n",
       "      <th>rooms</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>...</th>\n",
       "      <th>priceByArea</th>\n",
       "      <th>hasPlan</th>\n",
       "      <th>has3DTour</th>\n",
       "      <th>has360</th>\n",
       "      <th>parkingSpace</th>\n",
       "      <th>preciom2</th>\n",
       "      <th>dif_priceByArea_preciom2</th>\n",
       "      <th>population</th>\n",
       "      <th>insecurity_ratio</th>\n",
       "      <th>mean_price_munimadrid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>94477419</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>114000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>53.0</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>2151.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2150.943396</td>\n",
       "      <td>0.056604</td>\n",
       "      <td>154.264</td>\n",
       "      <td>28.8</td>\n",
       "      <td>4170.1250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>94474758</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>149000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>38.0</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>3921.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3921.052632</td>\n",
       "      <td>-0.052632</td>\n",
       "      <td>154.264</td>\n",
       "      <td>28.8</td>\n",
       "      <td>4170.1250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>94477419</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>114000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>53.0</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>2151.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2150.943396</td>\n",
       "      <td>0.056604</td>\n",
       "      <td>154.264</td>\n",
       "      <td>28.8</td>\n",
       "      <td>4170.1250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>94474758</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>149000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>38.0</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>3921.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3921.052632</td>\n",
       "      <td>-0.052632</td>\n",
       "      <td>154.264</td>\n",
       "      <td>28.8</td>\n",
       "      <td>4170.1250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>94471119</td>\n",
       "      <td>49</td>\n",
       "      <td>1</td>\n",
       "      <td>500000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>125.0</td>\n",
       "      <td>True</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>4000.0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>{'hasParkingSpace': True, 'isParkingSpaceInclu...</td>\n",
       "      <td>4000.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>154.264</td>\n",
       "      <td>28.8</td>\n",
       "      <td>4170.1250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3667</th>\n",
       "      <td>94304495</td>\n",
       "      <td>25</td>\n",
       "      <td>2</td>\n",
       "      <td>159000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>123.0</td>\n",
       "      <td>True</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>1293.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>{'hasParkingSpace': True, 'isParkingSpaceInclu...</td>\n",
       "      <td>1292.682927</td>\n",
       "      <td>0.317073</td>\n",
       "      <td>139.909</td>\n",
       "      <td>56.0</td>\n",
       "      <td>2104.0625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3668</th>\n",
       "      <td>94304043</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>199000.0</td>\n",
       "      <td>duplex</td>\n",
       "      <td>sale</td>\n",
       "      <td>133.0</td>\n",
       "      <td>False</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>1496.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1496.240602</td>\n",
       "      <td>-0.240602</td>\n",
       "      <td>139.909</td>\n",
       "      <td>56.0</td>\n",
       "      <td>2104.0625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3669</th>\n",
       "      <td>94303103</td>\n",
       "      <td>25</td>\n",
       "      <td>2</td>\n",
       "      <td>139500.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>99.0</td>\n",
       "      <td>True</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>1409.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1409.090909</td>\n",
       "      <td>-0.090909</td>\n",
       "      <td>139.909</td>\n",
       "      <td>56.0</td>\n",
       "      <td>2104.0625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3670</th>\n",
       "      <td>94301925</td>\n",
       "      <td>27</td>\n",
       "      <td>bj</td>\n",
       "      <td>119000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>71.0</td>\n",
       "      <td>False</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1676.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1676.056338</td>\n",
       "      <td>-0.056338</td>\n",
       "      <td>139.909</td>\n",
       "      <td>56.0</td>\n",
       "      <td>2104.0625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3671</th>\n",
       "      <td>94300959</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>118000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>78.0</td>\n",
       "      <td>True</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1513.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1512.820513</td>\n",
       "      <td>0.179487</td>\n",
       "      <td>139.909</td>\n",
       "      <td>56.0</td>\n",
       "      <td>2104.0625</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3672 rows × 29 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      propertyCode  numPhotos floor     price propertyType operation   size  \\\n",
       "0         94477419          2     1  114000.0         flat      sale   53.0   \n",
       "1         94474758          7     1  149000.0         flat      sale   38.0   \n",
       "2         94477419          2     1  114000.0         flat      sale   53.0   \n",
       "3         94474758          7     1  149000.0         flat      sale   38.0   \n",
       "4         94471119         49     1  500000.0         flat      sale  125.0   \n",
       "...            ...        ...   ...       ...          ...       ...    ...   \n",
       "3667      94304495         25     2  159000.0         flat      sale  123.0   \n",
       "3668      94304043          8     2  199000.0       duplex      sale  133.0   \n",
       "3669      94303103         25     2  139500.0         flat      sale   99.0   \n",
       "3670      94301925         27    bj  119000.0         flat      sale   71.0   \n",
       "3671      94300959         10     7  118000.0         flat      sale   78.0   \n",
       "\n",
       "      exterior  rooms  bathrooms  ... priceByArea  hasPlan  has3DTour  has360  \\\n",
       "0        False      1          1  ...      2151.0    False      False   False   \n",
       "1        False      1          1  ...      3921.0    False      False   False   \n",
       "2        False      1          1  ...      2151.0    False      False   False   \n",
       "3        False      1          1  ...      3921.0    False      False   False   \n",
       "4         True      3          2  ...      4000.0     True      False   False   \n",
       "...        ...    ...        ...  ...         ...      ...        ...     ...   \n",
       "3667      True      2          2  ...      1293.0    False      False    True   \n",
       "3668     False      4          2  ...      1496.0    False      False   False   \n",
       "3669      True      3          2  ...      1409.0    False      False   False   \n",
       "3670     False      3          1  ...      1676.0    False      False   False   \n",
       "3671      True      2          1  ...      1513.0    False      False   False   \n",
       "\n",
       "                                           parkingSpace     preciom2  \\\n",
       "0                                                   NaN  2150.943396   \n",
       "1                                                   NaN  3921.052632   \n",
       "2                                                   NaN  2150.943396   \n",
       "3                                                   NaN  3921.052632   \n",
       "4     {'hasParkingSpace': True, 'isParkingSpaceInclu...  4000.000000   \n",
       "...                                                 ...          ...   \n",
       "3667  {'hasParkingSpace': True, 'isParkingSpaceInclu...  1292.682927   \n",
       "3668                                                NaN  1496.240602   \n",
       "3669                                                NaN  1409.090909   \n",
       "3670                                                NaN  1676.056338   \n",
       "3671                                                NaN  1512.820513   \n",
       "\n",
       "     dif_priceByArea_preciom2  population insecurity_ratio  \\\n",
       "0                    0.056604     154.264             28.8   \n",
       "1                   -0.052632     154.264             28.8   \n",
       "2                    0.056604     154.264             28.8   \n",
       "3                   -0.052632     154.264             28.8   \n",
       "4                    0.000000     154.264             28.8   \n",
       "...                       ...         ...              ...   \n",
       "3667                 0.317073     139.909             56.0   \n",
       "3668                -0.240602     139.909             56.0   \n",
       "3669                -0.090909     139.909             56.0   \n",
       "3670                -0.056338     139.909             56.0   \n",
       "3671                 0.179487     139.909             56.0   \n",
       "\n",
       "      mean_price_munimadrid  \n",
       "0                 4170.1250  \n",
       "1                 4170.1250  \n",
       "2                 4170.1250  \n",
       "3                 4170.1250  \n",
       "4                 4170.1250  \n",
       "...                     ...  \n",
       "3667              2104.0625  \n",
       "3668              2104.0625  \n",
       "3669              2104.0625  \n",
       "3670              2104.0625  \n",
       "3671              2104.0625  \n",
       "\n",
       "[3672 rows x 29 columns]"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.merge(df,munimadrid_precio_medio_vivienda,on=\"district\")\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>district</th>\n",
       "      <th>preciom2</th>\n",
       "      <th>mean_price_munimadrid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Arganzuela</td>\n",
       "      <td>2150.943396</td>\n",
       "      <td>4170.1250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Arganzuela</td>\n",
       "      <td>3921.052632</td>\n",
       "      <td>4170.1250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arganzuela</td>\n",
       "      <td>2150.943396</td>\n",
       "      <td>4170.1250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arganzuela</td>\n",
       "      <td>3921.052632</td>\n",
       "      <td>4170.1250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Arganzuela</td>\n",
       "      <td>4000.000000</td>\n",
       "      <td>4170.1250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3667</th>\n",
       "      <td>Usera</td>\n",
       "      <td>1292.682927</td>\n",
       "      <td>2104.0625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3668</th>\n",
       "      <td>Usera</td>\n",
       "      <td>1496.240602</td>\n",
       "      <td>2104.0625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3669</th>\n",
       "      <td>Usera</td>\n",
       "      <td>1409.090909</td>\n",
       "      <td>2104.0625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3670</th>\n",
       "      <td>Usera</td>\n",
       "      <td>1676.056338</td>\n",
       "      <td>2104.0625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3671</th>\n",
       "      <td>Usera</td>\n",
       "      <td>1512.820513</td>\n",
       "      <td>2104.0625</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3672 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        district     preciom2  mean_price_munimadrid\n",
       "0     Arganzuela  2150.943396              4170.1250\n",
       "1     Arganzuela  3921.052632              4170.1250\n",
       "2     Arganzuela  2150.943396              4170.1250\n",
       "3     Arganzuela  3921.052632              4170.1250\n",
       "4     Arganzuela  4000.000000              4170.1250\n",
       "...          ...          ...                    ...\n",
       "3667       Usera  1292.682927              2104.0625\n",
       "3668       Usera  1496.240602              2104.0625\n",
       "3669       Usera  1409.090909              2104.0625\n",
       "3670       Usera  1676.056338              2104.0625\n",
       "3671       Usera  1512.820513              2104.0625\n",
       "\n",
       "[3672 rows x 3 columns]"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_precios_medios=df[[\"district\",\"preciom2\",\"mean_price_munimadrid\"]]\n",
    "df_precios_medios"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-67-8d5e87579ded>:1: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n",
      "  df2=df_precios_medios.groupby(\"district\")[\"preciom2\",\"mean_price_munimadrid\"].mean()\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>preciom2</th>\n",
       "      <th>mean_price_munimadrid</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>district</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Arganzuela</th>\n",
       "      <td>4021.294666</td>\n",
       "      <td>4170.1250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Barrio de Salamanca</th>\n",
       "      <td>6333.413427</td>\n",
       "      <td>6224.1250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Carabanchel</th>\n",
       "      <td>2212.874258</td>\n",
       "      <td>2289.8750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Centro</th>\n",
       "      <td>4938.916222</td>\n",
       "      <td>5254.3125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chamartín</th>\n",
       "      <td>5181.071956</td>\n",
       "      <td>5403.5625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chamberí</th>\n",
       "      <td>5418.865361</td>\n",
       "      <td>5657.3125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ciudad Lineal</th>\n",
       "      <td>3150.751247</td>\n",
       "      <td>3149.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fuencarral</th>\n",
       "      <td>3486.004072</td>\n",
       "      <td>3736.8750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hortaleza</th>\n",
       "      <td>3597.497758</td>\n",
       "      <td>3913.1250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Latina</th>\n",
       "      <td>2375.070190</td>\n",
       "      <td>2422.8750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Moncloa</th>\n",
       "      <td>4331.169168</td>\n",
       "      <td>4178.1250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Moratalaz</th>\n",
       "      <td>2516.230841</td>\n",
       "      <td>2662.6875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Puente de Vallecas</th>\n",
       "      <td>2110.419878</td>\n",
       "      <td>2028.6250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Retiro</th>\n",
       "      <td>5201.251663</td>\n",
       "      <td>4837.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>San Blas</th>\n",
       "      <td>2633.184386</td>\n",
       "      <td>2675.6875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tetuán</th>\n",
       "      <td>3756.067708</td>\n",
       "      <td>3899.9375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Usera</th>\n",
       "      <td>2047.759435</td>\n",
       "      <td>2104.0625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vicálvaro</th>\n",
       "      <td>2321.894625</td>\n",
       "      <td>2497.3750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Villa de Vallecas</th>\n",
       "      <td>2393.137097</td>\n",
       "      <td>2531.5000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Villaverde</th>\n",
       "      <td>1695.335342</td>\n",
       "      <td>1822.3750</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        preciom2  mean_price_munimadrid\n",
       "district                                               \n",
       "Arganzuela           4021.294666              4170.1250\n",
       "Barrio de Salamanca  6333.413427              6224.1250\n",
       "Carabanchel          2212.874258              2289.8750\n",
       "Centro               4938.916222              5254.3125\n",
       "Chamartín            5181.071956              5403.5625\n",
       "Chamberí             5418.865361              5657.3125\n",
       "Ciudad Lineal        3150.751247              3149.0000\n",
       "Fuencarral           3486.004072              3736.8750\n",
       "Hortaleza            3597.497758              3913.1250\n",
       "Latina               2375.070190              2422.8750\n",
       "Moncloa              4331.169168              4178.1250\n",
       "Moratalaz            2516.230841              2662.6875\n",
       "Puente de Vallecas   2110.419878              2028.6250\n",
       "Retiro               5201.251663              4837.0000\n",
       "San Blas             2633.184386              2675.6875\n",
       "Tetuán               3756.067708              3899.9375\n",
       "Usera                2047.759435              2104.0625\n",
       "Vicálvaro            2321.894625              2497.3750\n",
       "Villa de Vallecas    2393.137097              2531.5000\n",
       "Villaverde           1695.335342              1822.3750"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2=df_precios_medios.groupby(\"district\")[\"preciom2\",\"mean_price_munimadrid\"].mean()\n",
    "df2\n",
    "#los datos de idealista son similares a los de munimadrid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plotting both distibutions on the same figure\n",
    "fig = sns.kdeplot(df2['preciom2'], shade=True, color=\"r\")\n",
    "fig = sns.kdeplot(df2['mean_price_munimadrid'], shade=True, color=\"b\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### centros educativos por distrito"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "#importamos df colegios\n",
    "centros_educativos=pd.read_excel(\"../Centros_educativos/centros_educativos_final.xls\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>@id</th>\n",
       "      <th>@type</th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "      <th>relation</th>\n",
       "      <th>address.district.@id</th>\n",
       "      <th>address.area.@id</th>\n",
       "      <th>address.locality</th>\n",
       "      <th>address.postal-code</th>\n",
       "      <th>address.street-address</th>\n",
       "      <th>location.latitude</th>\n",
       "      <th>location.longitude</th>\n",
       "      <th>organization.organization-desc</th>\n",
       "      <th>organization.accesibility</th>\n",
       "      <th>organization.schedule</th>\n",
       "      <th>organization.services</th>\n",
       "      <th>organization.organization-name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>https://datos.madrid.es/egob/catalogo/tipo/ent...</td>\n",
       "      <td>https://datos.madrid.es/egob/kos/entidadesYorg...</td>\n",
       "      <td>167390</td>\n",
       "      <td>Academia Darío Estudio</td>\n",
       "      <td>http://www.madrid.es/sites/v/index.jsp?vgnextc...</td>\n",
       "      <td>https://datos.madrid.es/egob/kos/Provincia/Mad...</td>\n",
       "      <td>https://datos.madrid.es/egob/kos/Provincia/Mad...</td>\n",
       "      <td>MADRID</td>\n",
       "      <td>28013</td>\n",
       "      <td>CALLE GRAN VIA 63</td>\n",
       "      <td>40.422491</td>\n",
       "      <td>-3.709818</td>\n",
       "      <td>ENSEÑANZA: BACHILLERATO (Humanidades  y C. So...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Academia Darío Estudio</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>https://datos.madrid.es/egob/catalogo/tipo/ent...</td>\n",
       "      <td>https://datos.madrid.es/egob/kos/entidadesYorg...</td>\n",
       "      <td>5373</td>\n",
       "      <td>Altair, Colegio Internacional</td>\n",
       "      <td>http://www.madrid.es/sites/v/index.jsp?vgnextc...</td>\n",
       "      <td>https://datos.madrid.es/egob/kos/Provincia/Mad...</td>\n",
       "      <td>https://datos.madrid.es/egob/kos/Provincia/Mad...</td>\n",
       "      <td>MADRID</td>\n",
       "      <td>28036</td>\n",
       "      <td>CALLE JOAQUIN BAU 4</td>\n",
       "      <td>40.463788</td>\n",
       "      <td>-3.685848</td>\n",
       "      <td>ENSEÑANZA: Educación infantil - Primaria - ES...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Comedor - Transporte - Horario ampliado</td>\n",
       "      <td>Altair, Colegio Internacional</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>https://datos.madrid.es/egob/catalogo/tipo/ent...</td>\n",
       "      <td>https://datos.madrid.es/egob/kos/entidadesYorg...</td>\n",
       "      <td>10127337</td>\n",
       "      <td>Aula Municipal de Formación de Personas Adulta...</td>\n",
       "      <td>http://www.madrid.es/sites/v/index.jsp?vgnextc...</td>\n",
       "      <td>https://datos.madrid.es/egob/kos/Provincia/Mad...</td>\n",
       "      <td>https://datos.madrid.es/egob/kos/Provincia/Mad...</td>\n",
       "      <td>MADRID</td>\n",
       "      <td>28005</td>\n",
       "      <td>CALLE CASINO 5</td>\n",
       "      <td>40.406617</td>\n",
       "      <td>-3.705326</td>\n",
       "      <td>Programas Formativos:   Español para extranje...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>De lunes a jueves:    Mañanas de 08:30 a 13:00...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Aula Municipal de Formación de Personas Adulta...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0                                                @id  \\\n",
       "0           0  https://datos.madrid.es/egob/catalogo/tipo/ent...   \n",
       "1           1  https://datos.madrid.es/egob/catalogo/tipo/ent...   \n",
       "2           2  https://datos.madrid.es/egob/catalogo/tipo/ent...   \n",
       "\n",
       "                                               @type        id  \\\n",
       "0  https://datos.madrid.es/egob/kos/entidadesYorg...    167390   \n",
       "1  https://datos.madrid.es/egob/kos/entidadesYorg...      5373   \n",
       "2  https://datos.madrid.es/egob/kos/entidadesYorg...  10127337   \n",
       "\n",
       "                                               title  \\\n",
       "0                             Academia Darío Estudio   \n",
       "1                      Altair, Colegio Internacional   \n",
       "2  Aula Municipal de Formación de Personas Adulta...   \n",
       "\n",
       "                                            relation  \\\n",
       "0  http://www.madrid.es/sites/v/index.jsp?vgnextc...   \n",
       "1  http://www.madrid.es/sites/v/index.jsp?vgnextc...   \n",
       "2  http://www.madrid.es/sites/v/index.jsp?vgnextc...   \n",
       "\n",
       "                                address.district.@id  \\\n",
       "0  https://datos.madrid.es/egob/kos/Provincia/Mad...   \n",
       "1  https://datos.madrid.es/egob/kos/Provincia/Mad...   \n",
       "2  https://datos.madrid.es/egob/kos/Provincia/Mad...   \n",
       "\n",
       "                                    address.area.@id address.locality  \\\n",
       "0  https://datos.madrid.es/egob/kos/Provincia/Mad...           MADRID   \n",
       "1  https://datos.madrid.es/egob/kos/Provincia/Mad...           MADRID   \n",
       "2  https://datos.madrid.es/egob/kos/Provincia/Mad...           MADRID   \n",
       "\n",
       "   address.postal-code address.street-address  location.latitude  \\\n",
       "0                28013      CALLE GRAN VIA 63          40.422491   \n",
       "1                28036    CALLE JOAQUIN BAU 4          40.463788   \n",
       "2                28005         CALLE CASINO 5          40.406617   \n",
       "\n",
       "   location.longitude                     organization.organization-desc  \\\n",
       "0           -3.709818   ENSEÑANZA: BACHILLERATO (Humanidades  y C. So...   \n",
       "1           -3.685848   ENSEÑANZA: Educación infantil - Primaria - ES...   \n",
       "2           -3.705326   Programas Formativos:   Español para extranje...   \n",
       "\n",
       "   organization.accesibility  \\\n",
       "0                        0.0   \n",
       "1                        0.0   \n",
       "2                        1.0   \n",
       "\n",
       "                               organization.schedule  \\\n",
       "0                                                NaN   \n",
       "1                                                NaN   \n",
       "2  De lunes a jueves:    Mañanas de 08:30 a 13:00...   \n",
       "\n",
       "                     organization.services  \\\n",
       "0                                      NaN   \n",
       "1  Comedor - Transporte - Horario ampliado   \n",
       "2                                      NaN   \n",
       "\n",
       "                      organization.organization-name  \n",
       "0                             Academia Darío Estudio  \n",
       "1                      Altair, Colegio Internacional  \n",
       "2  Aula Municipal de Formación de Personas Adulta...  "
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "centros_educativos.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0                   Centro\n",
      "1                Chamartin\n",
      "2                   Centro\n",
      "3                 Chamberi\n",
      "4             CiudadLineal\n",
      "               ...        \n",
      "1450             Salamanca\n",
      "1451                Centro\n",
      "1452             Salamanca\n",
      "1453             Salamanca\n",
      "1454    SanBlas-Canillejas\n",
      "Name: address.district.@id, Length: 1455, dtype: object\n"
     ]
    }
   ],
   "source": [
    "#obtener distrito\n",
    "centros_educativos['address.district.@id']=centros_educativos['address.district.@id'].apply(lambda x: (x[76:]))\n",
    "print(centros_educativos['address.district.@id'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>address.district.@id</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Centro</td>\n",
       "      <td>Academia Darío Estudio</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Chamartin</td>\n",
       "      <td>Altair, Colegio Internacional</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Centro</td>\n",
       "      <td>Aula Municipal de Formación de Personas Adulta...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Chamberi</td>\n",
       "      <td>Aula Municipal de Formación de Personas Adulta...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>CiudadLineal</td>\n",
       "      <td>Aula Municipal de Formación de Personas Adulta...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1450</th>\n",
       "      <td>Salamanca</td>\n",
       "      <td>Organización Profesional Española (OPESA)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1451</th>\n",
       "      <td>Centro</td>\n",
       "      <td>Real Colegio Santa Isabel - La Asunción</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1452</th>\n",
       "      <td>Salamanca</td>\n",
       "      <td>San Román Escuela de Estudios Superiores</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1453</th>\n",
       "      <td>Salamanca</td>\n",
       "      <td>Sanromán Centro Internacional de Estudios Prof...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1454</th>\n",
       "      <td>SanBlas-Canillejas</td>\n",
       "      <td>Trainek formación profesional</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1455 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     address.district.@id                                              title\n",
       "0                  Centro                             Academia Darío Estudio\n",
       "1               Chamartin                      Altair, Colegio Internacional\n",
       "2                  Centro  Aula Municipal de Formación de Personas Adulta...\n",
       "3                Chamberi  Aula Municipal de Formación de Personas Adulta...\n",
       "4            CiudadLineal  Aula Municipal de Formación de Personas Adulta...\n",
       "...                   ...                                                ...\n",
       "1450            Salamanca          Organización Profesional Española (OPESA)\n",
       "1451               Centro            Real Colegio Santa Isabel - La Asunción\n",
       "1452            Salamanca           San Román Escuela de Estudios Superiores\n",
       "1453            Salamanca  Sanromán Centro Internacional de Estudios Prof...\n",
       "1454   SanBlas-Canillejas                      Trainek formación profesional\n",
       "\n",
       "[1455 rows x 2 columns]"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## nueva tabla solo con las columnas necesarias\n",
    "df3=centros_educativos[[\"address.district.@id\", \"title\"]]\n",
    "df3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3=df3.rename(columns={\"address.district.@id\":\"district\", \"title\":\"centro_educativo\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>centro_educativo</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>district</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Arganzuela</th>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Barajas</th>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Carabanchel</th>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Centro</th>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chamartin</th>\n",
       "      <td>98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chamberi</th>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CiudadLineal</th>\n",
       "      <td>102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Distrito</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fuencarral-ElPardo</th>\n",
       "      <td>127</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hortaleza</th>\n",
       "      <td>103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Latina</th>\n",
       "      <td>92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Moncloa-Aravaca</th>\n",
       "      <td>87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Moratalaz</th>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PuenteDeVallecas</th>\n",
       "      <td>97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Retiro</th>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Salamanca</th>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SanBlas-Canillejas</th>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tetuan</th>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Usera</th>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vicalvaro</th>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>VillaDeVallecas</th>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Villaverde</th>\n",
       "      <td>68</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    centro_educativo\n",
       "district                            \n",
       "Arganzuela                        57\n",
       "Barajas                           27\n",
       "Carabanchel                       93\n",
       "Centro                            52\n",
       "Chamartin                         98\n",
       "Chamberi                          62\n",
       "CiudadLineal                     102\n",
       "Distrito                           1\n",
       "Fuencarral-ElPardo               127\n",
       "Hortaleza                        103\n",
       "Latina                            92\n",
       "Moncloa-Aravaca                   87\n",
       "Moratalaz                         43\n",
       "PuenteDeVallecas                  97\n",
       "Retiro                            47\n",
       "Salamanca                         39\n",
       "SanBlas-Canillejas                77\n",
       "Tetuan                            44\n",
       "Usera                             58\n",
       "Vicalvaro                         32\n",
       "VillaDeVallecas                   49\n",
       "Villaverde                        68"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3 = df3.groupby('district').count()\n",
    "df3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df3['district'] = df3.index "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='district'>"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df3.plot(kind='bar')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>propertyCode</th>\n",
       "      <th>numPhotos</th>\n",
       "      <th>floor</th>\n",
       "      <th>price</th>\n",
       "      <th>propertyType</th>\n",
       "      <th>operation</th>\n",
       "      <th>size</th>\n",
       "      <th>exterior</th>\n",
       "      <th>rooms</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>...</th>\n",
       "      <th>hasPlan</th>\n",
       "      <th>has3DTour</th>\n",
       "      <th>has360</th>\n",
       "      <th>parkingSpace</th>\n",
       "      <th>preciom2</th>\n",
       "      <th>dif_priceByArea_preciom2</th>\n",
       "      <th>population</th>\n",
       "      <th>insecurity_ratio</th>\n",
       "      <th>mean_price_munimadrid</th>\n",
       "      <th>centro_educativo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>94477419</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>114000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>53.0</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2150.943396</td>\n",
       "      <td>0.056604</td>\n",
       "      <td>154.264</td>\n",
       "      <td>28.8</td>\n",
       "      <td>4170.1250</td>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>94474758</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>149000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>38.0</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3921.052632</td>\n",
       "      <td>-0.052632</td>\n",
       "      <td>154.264</td>\n",
       "      <td>28.8</td>\n",
       "      <td>4170.1250</td>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>94477419</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>114000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>53.0</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2150.943396</td>\n",
       "      <td>0.056604</td>\n",
       "      <td>154.264</td>\n",
       "      <td>28.8</td>\n",
       "      <td>4170.1250</td>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>94474758</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>149000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>38.0</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3921.052632</td>\n",
       "      <td>-0.052632</td>\n",
       "      <td>154.264</td>\n",
       "      <td>28.8</td>\n",
       "      <td>4170.1250</td>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>94471119</td>\n",
       "      <td>49</td>\n",
       "      <td>1</td>\n",
       "      <td>500000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>125.0</td>\n",
       "      <td>True</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>{'hasParkingSpace': True, 'isParkingSpaceInclu...</td>\n",
       "      <td>4000.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>154.264</td>\n",
       "      <td>28.8</td>\n",
       "      <td>4170.1250</td>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1603</th>\n",
       "      <td>94304495</td>\n",
       "      <td>25</td>\n",
       "      <td>2</td>\n",
       "      <td>159000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>123.0</td>\n",
       "      <td>True</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>{'hasParkingSpace': True, 'isParkingSpaceInclu...</td>\n",
       "      <td>1292.682927</td>\n",
       "      <td>0.317073</td>\n",
       "      <td>139.909</td>\n",
       "      <td>56.0</td>\n",
       "      <td>2104.0625</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1604</th>\n",
       "      <td>94304043</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>199000.0</td>\n",
       "      <td>duplex</td>\n",
       "      <td>sale</td>\n",
       "      <td>133.0</td>\n",
       "      <td>False</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1496.240602</td>\n",
       "      <td>-0.240602</td>\n",
       "      <td>139.909</td>\n",
       "      <td>56.0</td>\n",
       "      <td>2104.0625</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1605</th>\n",
       "      <td>94303103</td>\n",
       "      <td>25</td>\n",
       "      <td>2</td>\n",
       "      <td>139500.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>99.0</td>\n",
       "      <td>True</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1409.090909</td>\n",
       "      <td>-0.090909</td>\n",
       "      <td>139.909</td>\n",
       "      <td>56.0</td>\n",
       "      <td>2104.0625</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1606</th>\n",
       "      <td>94301925</td>\n",
       "      <td>27</td>\n",
       "      <td>bj</td>\n",
       "      <td>119000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>71.0</td>\n",
       "      <td>False</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1676.056338</td>\n",
       "      <td>-0.056338</td>\n",
       "      <td>139.909</td>\n",
       "      <td>56.0</td>\n",
       "      <td>2104.0625</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1607</th>\n",
       "      <td>94300959</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>118000.0</td>\n",
       "      <td>flat</td>\n",
       "      <td>sale</td>\n",
       "      <td>78.0</td>\n",
       "      <td>True</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1512.820513</td>\n",
       "      <td>0.179487</td>\n",
       "      <td>139.909</td>\n",
       "      <td>56.0</td>\n",
       "      <td>2104.0625</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1608 rows × 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      propertyCode  numPhotos floor     price propertyType operation   size  \\\n",
       "0         94477419          2     1  114000.0         flat      sale   53.0   \n",
       "1         94474758          7     1  149000.0         flat      sale   38.0   \n",
       "2         94477419          2     1  114000.0         flat      sale   53.0   \n",
       "3         94474758          7     1  149000.0         flat      sale   38.0   \n",
       "4         94471119         49     1  500000.0         flat      sale  125.0   \n",
       "...            ...        ...   ...       ...          ...       ...    ...   \n",
       "1603      94304495         25     2  159000.0         flat      sale  123.0   \n",
       "1604      94304043          8     2  199000.0       duplex      sale  133.0   \n",
       "1605      94303103         25     2  139500.0         flat      sale   99.0   \n",
       "1606      94301925         27    bj  119000.0         flat      sale   71.0   \n",
       "1607      94300959         10     7  118000.0         flat      sale   78.0   \n",
       "\n",
       "      exterior  rooms  bathrooms  ... hasPlan  has3DTour  has360  \\\n",
       "0        False      1          1  ...   False      False   False   \n",
       "1        False      1          1  ...   False      False   False   \n",
       "2        False      1          1  ...   False      False   False   \n",
       "3        False      1          1  ...   False      False   False   \n",
       "4         True      3          2  ...    True      False   False   \n",
       "...        ...    ...        ...  ...     ...        ...     ...   \n",
       "1603      True      2          2  ...   False      False    True   \n",
       "1604     False      4          2  ...   False      False   False   \n",
       "1605      True      3          2  ...   False      False   False   \n",
       "1606     False      3          1  ...   False      False   False   \n",
       "1607      True      2          1  ...   False      False   False   \n",
       "\n",
       "                                           parkingSpace     preciom2  \\\n",
       "0                                                   NaN  2150.943396   \n",
       "1                                                   NaN  3921.052632   \n",
       "2                                                   NaN  2150.943396   \n",
       "3                                                   NaN  3921.052632   \n",
       "4     {'hasParkingSpace': True, 'isParkingSpaceInclu...  4000.000000   \n",
       "...                                                 ...          ...   \n",
       "1603  {'hasParkingSpace': True, 'isParkingSpaceInclu...  1292.682927   \n",
       "1604                                                NaN  1496.240602   \n",
       "1605                                                NaN  1409.090909   \n",
       "1606                                                NaN  1676.056338   \n",
       "1607                                                NaN  1512.820513   \n",
       "\n",
       "      dif_priceByArea_preciom2 population  insecurity_ratio  \\\n",
       "0                     0.056604    154.264              28.8   \n",
       "1                    -0.052632    154.264              28.8   \n",
       "2                     0.056604    154.264              28.8   \n",
       "3                    -0.052632    154.264              28.8   \n",
       "4                     0.000000    154.264              28.8   \n",
       "...                        ...        ...               ...   \n",
       "1603                  0.317073    139.909              56.0   \n",
       "1604                 -0.240602    139.909              56.0   \n",
       "1605                 -0.090909    139.909              56.0   \n",
       "1606                 -0.056338    139.909              56.0   \n",
       "1607                  0.179487    139.909              56.0   \n",
       "\n",
       "     mean_price_munimadrid  centro_educativo  \n",
       "0                4170.1250                57  \n",
       "1                4170.1250                57  \n",
       "2                4170.1250                57  \n",
       "3                4170.1250                57  \n",
       "4                4170.1250                57  \n",
       "...                    ...               ...  \n",
       "1603             2104.0625                58  \n",
       "1604             2104.0625                58  \n",
       "1605             2104.0625                58  \n",
       "1606             2104.0625                58  \n",
       "1607             2104.0625                58  \n",
       "\n",
       "[1608 rows x 30 columns]"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.merge(df,df3,on=\"district\")\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exportación excel final dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exportar la tabla final a excel para train, test, split."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.to_excel(\"project_dataset.xls\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
